resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "eks.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}


resource "aws_iam_role" "eks_node_group_role" {
  name = "eks-node-group-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}


resource "aws_eks_cluster" "main_cluster" {
  name     = "main-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids = concat(
      [for s in aws_subnet.private : s.id],
      [for s in aws_subnet.public : s.id]
    )
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy_attachment,
  ]
}

resource "aws_eks_node_group" "main_node_group" {
  cluster_name    = aws_eks_cluster.main_cluster.name
  node_group_name = "main-worker-nodes"
  node_role_arn   = aws_iam_role.eks_node_group_role.arn

  subnet_ids = [for s in aws_subnet.private : s.id]

  instance_types = ["t3.medium"]
  capacity_type  = "SPOT"
  scaling_config {
    desired_size = 1
    max_size     = 3
    min_size     = 1
  }

  depends_on = [aws_eks_cluster.main_cluster,
    aws_iam_role_policy_attachment.eks_worker_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.ecr_read_only_policy
  ]
}


# === config related to eks ASCP which allows us to manage credentials



#tls certificate, thanks to it we can integrate our policies with kubernetes irsa
data "tls_certificate" "eks" {
  url = aws_eks_cluster.main_cluster.identity[0].oidc[0].issuer
}


resource "aws_iam_openid_connect_provider" "eks" {
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.eks.certificates[0].sha1_fingerprint]
  url             = aws_eks_cluster.main_cluster.identity[0].oidc[0].issuer

  tags = {
    Name = "eks-oidc-provider"
  }
}

# ASCP instalation in our eks 
resource "aws_eks_addon" "secrets_store_csi_driver" {
  cluster_name = aws_eks_cluster.main_cluster.name
  addon_name   = "aws-secrets-store-csi-driver"
}

# we're defining iam role for our microserwises, because we want our pods to to download aws secrets
resource "aws_iam_role" "app_service_account_role" {
  name = "app-service-account-role"

  # that's the policy that allows kubernete's account to redeem that role
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Federated = aws_iam_openid_connect_provider.eks.arn
        },
        Action = "sts:AssumeRoleWithWebIdentity",
        Condition = {
          StringEquals = {
            "${replace(aws_iam_openid_connect_provider.eks.url, "https://", "")}:sub" = "system:serviceaccount:default:*"
          }
        }
      }
    ]
  })
}

# we're defining policy that allows us to read secrets
resource "aws_iam_policy" "secrets_reader_policy" {
  name        = "app-secrets-reader-policy"
  description = "Allows reading specific secrets from Secrets Manager"
  # policy that grants access to all the secrets generated by rds module
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = "secretsmanager:GetSecretValue",
        Resource = concat(
          [for s in module.microservice_db : s.db_password_secret_arn],
          [aws_secretsmanager_secret.app_secrets.arn]
        )
      }
    ]
  })
}


# policy attachment
resource "aws_iam_role_policy_attachment" "app_secrets_reader_attachment" {
  role       = aws_iam_role.app_service_account_role.name
  policy_arn = aws_iam_policy.secrets_reader_policy.arn
}





# few important policy attachments, without them our worker nodes cannot communicate with cluster
resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_group_role.name
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_group_role.name
}

resource "aws_iam_role_policy_attachment" "ecr_read_only_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_group_role.name
}
