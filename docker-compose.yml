version: '3.9'

services:
  postgres:
    image: postgres:15
    command: postgres -c max_connections=250
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DBS: e_commerce_auth_db,e_commerce_catalog_db,e_commerce_inventory_db,e_commerce_notification_db,e_commerce_order_db,e_commerce_payment_db,e_commerce_welcomenotification_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:z
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - e-commerce-network

  auth-service:
    build: ./AuthService
    scale: 1
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - e-commerce-network

  catalog-service:
    build: ./CatalogService
    scale: 1
    environment:
      - SERVER_PORT=8081
      - DB_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - e-commerce-network

  order-service:
    build: ./OrderService
    scale: 1
    environment:
      - SERVER_PORT=8083
      - DB_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - e-commerce-network

  inventory-service:
    build: ./InventoryService
    scale: 1
    environment:
      - SERVER_PORT=8082
      - DB_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - e-commerce-network

  notification-service:
    build: ./NotificationService
    scale: 1
    environment:
      - SERVER_PORT=8084
      - DB_HOST=postgres
      - AUTH_SERVICE_URL=http://auth-service:8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - e-commerce-network

  payment-service:
    build: ./PaymentService
    scale: 1
    environment:
      - SERVER_PORT=8086
      - DB_HOST=postgres
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - e-commerce-network

  welcome-notification-service:
    build: ./WelcomeNotificationService
    scale: 1
    environment:
      - SERVER_PORT=8087
      - DB_HOST=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq # Pamiętaj, że ten serwis miał inną zmienną
      - SPRING_RABBITMQ_USER=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - e-commerce-network

  bff-service:
    build: ./BFFService
    scale: 1
    ports:
      - "8085:8085"
    environment:
      - SERVER_PORT=8085
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:8080
      - CATALOG_SERVICE_URL=http://catalog-service:8081
      - ORDER_SERVICE_URL=http://order-service:8083
    depends_on:
      - auth-service
      - catalog-service
      - order-service
    networks:
      - e-commerce-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - bff-service
    networks:
      - e-commerce-network

networks:
  e-commerce-network:
    driver: bridge

volumes:
  postgres_data:
